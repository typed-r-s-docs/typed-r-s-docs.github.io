Getting Start
======================================================

Download
-----------------
* Download the latest version of the launcher.


* Install the latest version of the project for Keil, DFP from the launcher, also download the latest SDK and, if desired, the simulator.

* Next, to flash the board with jtag, you need to add the flm file to Keil, for this, see this guide

* Install all the packs that come with it from DFP

* Download EEZ Studio (only from laucher)
 
* This is where the minimum requirements for work end, but you can look at the rest of the guides to better understand how to work with the board

.. warning:: It is recommended to create a shared folder for working with the panel, and download everything from the launcher to it for greater convenience
 

Add FLM to Keil
-----------------
1. open folder `SDK->FLM`, copy all files from directory
2. go to open folder `Keil_v5/ARM/Flash`
3. copy all files from first step in `Flash` dir 
4. check in keil (add .flm algorithm in project)


.. note::  If everything went well at this stage, you can upload the application to the board with a demo version, for normal operation of the board it


About Keil Project
-----------------
.. list-table:: 
   :widths: 20 80
   :header-rows: 1
   :align: center

   * - APP_MAIN
     - Description
   * - assets.c
     - core file for working assets system [more about them here](/assets/)
   * - app_main.c
     - initialization all user platform, from CAN interface to UI
   * - app_screens.c
     - here all our objects and screens are created, absolutely all graphics, with the appearance of each new screen we need to go down to the lowest of this file, and arrange the correct sequence for creating screens.
   * - app_handlers.c
     - there are timers set here from 1 millisecond to a second for any of your purposes (sending CAN messages, or processing something)
   * - app_events.c
     - all logic that interacts with graphics is will be written here, [all events work through lvgl](events_working)
   * - app_can.c
     - receiving CAN messages by the panel, from here you need to process the messages and send graphic events to the app_events file depending on the incoming message (for example)
   * - gj1939_app.c
     - table of CAN messages that the panel will receive
   * - app_global_config.h
     - A project-wide configuration file that configures the debug depth level, the brightness level when starting using the display startup function, the time zone, and the application version.

.. list-table:: 
   :widths: 20 80
   :header-rows: 1
   :align: center

   * - APP_UI
     - Description
   * - app_ui.c
     - here screen presets for work are created and filled in [more about them here](/presets_working/)
   * - app_images.c
     - here the paths to your images are generated, which you convert in the converter, [more details here](/assets/)
   * - app_screens.c
     - here all our objects and screens are created, absolutely all graphics, with the appearance of each new screen we need to go down to the lowest of this file, and arrange the correct sequence for creating screens.

Simulator
-----------------
The simulator is available for installation via the launcher
 
- The simulator fully reproduces the functionality of the panel, with rare exceptions
- The simulator works directly with the same files as the panel
- To use resources, you need to add all files to АPP_Assets (ctrl shift a), located in the assets folder

.. warning::  The simulator is supported only in EEZ Studio, starting from version 0.17


NXP JTAG firmware update
-----------------

JTAG update firmware
Firmware loader
The utility for updating the firmware of the JTAG is included in our SDK starting from version 1.1 and below, SDK->MCU-LINK_installer_3.140

Updating MCU-Link Pro firmware
To update the MCU-Link’s firmware it must be powered up in (USB) ISP mode. To do this insert jumper J4 then connect MCU-Link Pro to your host computer using a micro B USB cable connected to J1. The red STATUS LED (LED3) should light and stay on (for further information on LED status information refer to Section 4.7. The board will enumerate on the host computer as a HID class device. Navigate to the MCULINK_installer_Vx_xxx directory (where Vx_xxx indicates the version number, e.g. V3.108), then follow the installation instructions in the readme.txt to find and run the firmware update utilities for CMSIS-DAP or J-Link versions. After updating the firmware using one of these scripts, unplug the board from the host computer, remove J4 and then reconnect the board.

Firmware Installation Guide¶
This firmware installation guide is suitable for Windows, Linux and macOS environments

Scripts are supplied to enable the programming of NXP CMSIS-DAP and SEGGER J-Link firmware images into MCU-Link.

To make use of this functionality, place the board in ISP USB mode using the appropriate jumper on your MCU-Link board, then connect it to the host computer via USB. Refer to the board documentation for more information.

To install CMSIS-DAP firmware, open a command prompt and call the program script: \scripts\program_CMSIS

To install J-Link firmware, open a command prompt and call the program script: \scripts\program_JLINK

The script programs the firmware image into flash using blhost utility. Once completed, follow the on-screen instructions to make use of the programmed debug probe.

Further information about the use of blhost is available in the User Guide https://www.nxp.com/docs/en/user-guide/MCUBLHOSTUG.pdf

Note: The script offers the option to repeat the programming sequence to enable multiple debug probes to be programmed in sequence.